// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the models down below

model User {
  id        String @id @default(uuid())
  email     String @unique
  password  String
  firstName String
  lastName  String
  role      Role   @default(USER)
  token     Token?

  photo String? @default("default.png")
  // social Json?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ResetPassword ResetPassword[]

  flightBookings FlightBooking[]

  // other fields should be added as the project grows
  @@index([email])
  @@map(name: "users")
}

// Reset password models
model ResetPassword {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  isUsed    Boolean  @default(false)
  expiresAt DateTime
  updatedAt DateTime @updatedAt

  @@map(name: "reset_password")
}

model Token {
  id          String   @id @default(uuid())
  token_value String   @unique
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
   @@map(name: "tokens")
}

// booking models 

model Airport {
  id                String   @id @default(uuid())
  name              String
  code              String @unique
  city              String
  country           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  flights_departing Flight[] @relation("departures")
  flights_arriving  Flight[] @relation("arrivals")

  @@map(name: "airports")
}

model Flight {
  id                   String   @id @default(uuid())
  airline              String   //TODO: build a schema for airlines, but later
  departure_time       DateTime
  arrival_time         DateTime
  // fk
  departure_airport    Airport  @relation("departures", fields: [departure_airport_id], references: [id])
  departure_airport_id String
  arrival_airport      Airport  @relation("arrivals", fields: [arrival_airport_id], references: [id])
  arrival_airport_id   String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  flight_seat_prices FlightSeatPrice[]

  @@map(name: "flights")
}

model FlightSeatPrice {
  id            String       @id @default(uuid())
  price         Float
  // fk
  flight        Flight       @relation(fields: [flight_id], references: [id])
  flight_id     String
  class         EFlightClass @default(ECONOMY)
  numberofseats Int // will decrement
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  flightBookings FlightBooking[]

  @@map(name: "flight_seat_prices")
}

model FlightBooking {
  id                   String          @id @default(uuid())
  // fk
  user                 User            @relation(fields: [user_id], references: [id])
  user_id              String
  flight_seat_price    FlightSeatPrice @relation(fields: [flight_seat_price_id], references: [id])
  flight_seat_price_id String
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  @@map(name: "flight_bookings")
}

enum EFlightClass {
  ECONOMY
  BUSINESS
}

enum Role {
  SUPER_ADMIN
  TRAVEL_ADMIN
  TRAVEL_TEAM_MEMBER
  MANAGER
  REQUESTER
  USER
}
